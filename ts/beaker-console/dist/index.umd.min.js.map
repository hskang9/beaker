{"version":3,"file":"index.umd.min.js","sources":["../src/account.ts","../src/contract.ts","../src/utils.ts"],"sourcesContent":["import { stringToPath } from '@cosmjs/crypto';\nimport type { HttpEndpoint } from '@cosmjs/tendermint-rpc';\nimport {\n  Coin,\n  GasPrice,\n  Secp256k1HdWallet,\n  SigningCosmWasmClient,\n} from 'cosmwasm';\n\ntype Config = {\n  global: {\n    account_prefix: string;\n    derivation_path: string;\n    networks: { [x: string]: { rpc_endpoint: string | HttpEndpoint } };\n    gas_price: string;\n    accounts: Record<string, { mnemonic: string }>;\n  };\n};\n\n/**\n * Account instance with baked-in client and utility methods\n */\nexport class Account {\n  signingClient: SigningCosmWasmClient;\n  wallet: Secp256k1HdWallet;\n  address: string;\n\n  constructor(\n    wallet: Secp256k1HdWallet,\n    signingClient: SigningCosmWasmClient,\n    address: string,\n  ) {\n    this.wallet = wallet;\n    this.signingClient = signingClient;\n    this.address = address;\n  }\n\n  static async withDerivedAddress(\n    wallet: Secp256k1HdWallet,\n    signingClient: SigningCosmWasmClient,\n  ): Promise<Account> {\n    const accountData = (await wallet.getAccounts())[0];\n    if (accountData === undefined) {\n      throw Error('address not found');\n    }\n    return new Account(wallet, signingClient, accountData.address);\n  }\n\n  /**\n   * Get balances for specific denom, only support native coin\n   */\n  async getBalance(denom: string): Promise<Coin> {\n    const accounts = await this.wallet.getAccounts();\n    const address = accounts[0]?.address;\n\n    if (!address) {\n      throw Error(`No account not found from: ${accounts}`);\n    }\n\n    return await this.signingClient.getBalance(address, denom);\n  }\n}\n\nexport const fromMnemonic = async (\n  conf: Config,\n  network: string | number,\n  mnemonic: string,\n): Promise<Account> => {\n  if (typeof conf.global.account_prefix !== 'string') {\n    throw Error('`account_prefix` must be string');\n  }\n\n  const options = {\n    prefix: conf.global.account_prefix,\n    hdPaths: [stringToPath(conf.global.derivation_path)],\n  };\n  const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, options);\n\n  const networkInfo = conf.global.networks[network];\n  if (!networkInfo) {\n    throw Error(`network info for ${network} not found in the config`);\n  }\n\n  const signingClient = await SigningCosmWasmClient.connectWithSigner(\n    networkInfo.rpc_endpoint,\n    wallet,\n    { gasPrice: GasPrice.fromString(conf.global.gas_price) },\n  );\n  return Account.withDerivedAddress(wallet, signingClient);\n};\n\nexport const getAccounts = async (conf: Config, network: string) => {\n  const accountName = Object.keys(conf.global.accounts);\n  const account = await Promise.all(\n    Object.values(conf.global.accounts).map((a) =>\n      fromMnemonic(conf, network, a.mnemonic),\n    ),\n  );\n\n  return Object.fromEntries(accountName.map((name, i) => [name, account[i]]));\n};\n","import { pascal } from 'case';\nimport type {\n  CodeDetails,\n  Contract as ContractInfo,\n  CosmWasmClient,\n  StdFee,\n} from 'cosmwasm';\nimport type { Account } from './account';\nimport { mapKV, mapObject } from './utils';\n\ntype Msg = Record<string, unknown>;\n\n/**\n * Contract instance with baked-in client\n */\nexport class Contract {\n  address: string;\n  client: CosmWasmClient;\n\n  constructor(address: string, client: CosmWasmClient) {\n    this.address = address;\n    this.client = client;\n  }\n\n  /**\n   * Get contract info\n   */\n  async getInfo(): Promise<ContractInfo> {\n    return await this.client.getContract(this.address);\n  }\n\n  /**\n   * Get code details\n   */\n  async getCode(): Promise<CodeDetails> {\n    return this.client.getCodeDetails((await this.getInfo()).codeId);\n  }\n\n  /**\n   * Query the contract by passing query message\n   * @returns query result\n   */\n  async query(qmsg: Msg): Promise<unknown> {\n    return this.client.queryContractSmart(this.address, qmsg);\n  }\n\n  /**\n   * Execute the contract.\n   * example usage: `contract.execute(xmsg).by(signerAccount)`\n   */\n  execute(\n    xmsg: Msg,\n    senderAddress: string | null,\n    fee: number | 'auto' | StdFee = 'auto',\n  ) {\n    return {\n      by: (account: Account) =>\n        executor(account, this.address)(xmsg, senderAddress, fee),\n    };\n  }\n}\n\nexport const getContracts = (\n  client: CosmWasmClient,\n  state: Record<string, unknown>,\n  /* eslint-disable */\n  // @ts-ignore\n  sdk: { contracts: Record<string, Record<string, Function>> },\n) => {\n  return mapKV(\n    state,\n    (\n      contractName: string,\n      contractInfo: { addresses: Record<string, Record<string, string>> },\n    ) => {\n      const addresses = contractInfo.addresses;\n      const prefixLabel = (label: string) => `$${label}`;\n\n      const pascalContractName = pascal(contractName);\n      const contractSdk = errorIfNotFound(\n        sdk.contracts[pascalContractName],\n        `\"${pascalContractName}\" not found in sdk`,\n      );\n\n      const contractQueryClient = errorIfNotFound(\n        contractSdk[`${pascalContractName}QueryClient`],\n        `\"${pascalContractName}QueryClient\" not found in contract's sdk`,\n      );\n\n      const contractClient = errorIfNotFound(\n        contractSdk[`${pascalContractName}Client`],\n        `\"${pascalContractName}Client\" not found in contract's sdk`,\n      );\n\n      let contracts = mapObject(\n        addresses,\n        prefixLabel,\n        // (addr: string) => ,\n        (addr: string) => ({\n          ...new Contract(addr, client),\n          /* eslint-disable */\n          // @ts-ignore\n          ...new contractQueryClient(client, addr),\n          signer: (account: Account) => {\n            return {\n              /* eslint-disable */\n              // @ts-ignore\n              ...new contractClient(\n                account.signingClient,\n                account.address,\n                addr,\n              ),\n              execute: executor(account, addr),\n            };\n          },\n        }),\n      );\n\n      if (typeof contracts['$default'] === 'object' && contracts['$default']) {\n        contracts = {\n          ...contracts,\n          ...contracts['$default'],\n        };\n\n        Object.setPrototypeOf(contracts, Contract.prototype);\n      }\n      return [contractName, contracts];\n    },\n  );\n};\n\nconst executor =\n  (account: Account, contractAddress: string) =>\n  async (\n    msg: Msg,\n    senderAddress: string | null,\n    fee: number | 'auto' | StdFee = 'auto',\n  ) => {\n    const _senderAddress =\n      senderAddress || (await account.wallet.getAccounts())[0]?.address;\n\n    if (!_senderAddress) {\n      throw Error('Unable to get sender address');\n    }\n\n    return await account.signingClient.execute(\n      _senderAddress,\n      contractAddress,\n      msg,\n      fee,\n    );\n  };\n\nconst errorIfNotFound = <T>(object: T | undefined, msg: string) => {\n  if (object === undefined) {\n    throw Error(msg);\n  } else {\n    return object;\n  }\n};\n","/* eslint-disable */\n\nconst id = <T>(x: T) => x;\n\nexport const mapObject = (\n  o: Record<string, unknown>,\n  f: Function,\n  g: Function,\n): Record<string, unknown> =>\n  Object.fromEntries(Object.entries(o).map(([k, v]) => [f(k), g(v)]));\n\nexport const mapKV = (\n  o: Record<string, unknown>,\n  f: Function,\n): Record<string, unknown> =>\n  Object.fromEntries(Object.entries(o).map(([k, v]) => f(k, v)));\n\nexport const mapValues = (o: Record<string, unknown>, g: Function) =>\n  mapObject(o, id, g);\n\nexport const extendWith =\n  (properties: Record<string, unknown>) =>\n  (context: Record<string, unknown>) => {\n    Object.entries(properties).forEach(([k, v]) => {\n      // @ts-ignore\n      context[k] = v;\n      // Object.defineProperty(context, k, {\n      //   configurable: true,\n      //   enumerable: true,\n      //   value: v,\n      // });\n    });\n  };\n"],"names":["Account","wallet","signingClient","address","this","withDerivedAddress","getAccounts","undefined","accountData","_a","sent","Error","prototype","getBalance","denom","accounts","_b","concat","Contract","client","getInfo","getContract","getCode","getCodeDetails","_c","codeId","query","qmsg","queryContractSmart","execute","xmsg","senderAddress","fee","_this","by","account","executor","contractAddress","msg","_senderAddress","errorIfNotFound","object","properties","context","Object","entries","forEach","k","v","conf","network","__awaiter","accountName","keys","global","Promise","all","values","map","a","mnemonic","account_prefix","options","prefix","hdPaths","stringToPath","derivation_path","Secp256k1HdWallet","fromMnemonic","networkInfo","networks","SigningCosmWasmClient","connectWithSigner","rpc_endpoint","gasPrice","GasPrice","fromString","gas_price","fromEntries","name","i","state","sdk","o","f","contractName","contractInfo","g","addresses","pascalContractName","pascal","contractSdk","contracts","contractQueryClient","contractClient","label","addr","__assign","signer","setPrototypeOf"],"mappings":"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"}