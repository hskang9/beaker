{"version":3,"file":"index.cjs","sources":["../src/account.ts","../src/utils.ts","../src/contract.ts"],"sourcesContent":["import { stringToPath } from '@cosmjs/crypto';\nimport type { HttpEndpoint } from '@cosmjs/tendermint-rpc';\nimport {\n  Coin,\n  GasPrice,\n  Secp256k1HdWallet,\n  SigningCosmWasmClient,\n} from 'cosmwasm';\n\ntype Config = {\n  global: {\n    account_prefix: string;\n    derivation_path: string;\n    networks: { [x: string]: { rpc_endpoint: string | HttpEndpoint } };\n    gas_price: string;\n    accounts: Record<string, { mnemonic: string }>;\n  };\n};\n\n/**\n * Account instance with baked-in client and utility methods\n */\nexport class Account {\n  signingClient: SigningCosmWasmClient;\n  wallet: Secp256k1HdWallet;\n  address: string;\n\n  constructor(\n    wallet: Secp256k1HdWallet,\n    signingClient: SigningCosmWasmClient,\n    address: string,\n  ) {\n    this.wallet = wallet;\n    this.signingClient = signingClient;\n    this.address = address;\n  }\n\n  static async withDerivedAddress(\n    wallet: Secp256k1HdWallet,\n    signingClient: SigningCosmWasmClient,\n  ): Promise<Account> {\n    const accountData = (await wallet.getAccounts())[0];\n    if (accountData === undefined) {\n      throw Error('address not found');\n    }\n    return new Account(wallet, signingClient, accountData.address);\n  }\n\n  /**\n   * Get balances for specific denom, only support native coin\n   */\n  async getBalance(denom: string): Promise<Coin> {\n    const accounts = await this.wallet.getAccounts();\n    const address = accounts[0]?.address;\n\n    if (!address) {\n      throw Error(`No account not found from: ${accounts}`);\n    }\n\n    return await this.signingClient.getBalance(address, denom);\n  }\n}\n\nexport const fromMnemonic = async (\n  conf: Config,\n  network: string | number,\n  mnemonic: string,\n): Promise<Account> => {\n  if (typeof conf.global.account_prefix !== 'string') {\n    throw Error('`account_prefix` must be string');\n  }\n\n  const options = {\n    prefix: conf.global.account_prefix,\n    hdPaths: [stringToPath(conf.global.derivation_path)],\n  };\n  const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, options);\n\n  const networkInfo = conf.global.networks[network];\n  if (!networkInfo) {\n    throw Error(`network info for ${network} not found in the config`);\n  }\n\n  const signingClient = await SigningCosmWasmClient.connectWithSigner(\n    networkInfo.rpc_endpoint,\n    wallet,\n    { gasPrice: GasPrice.fromString(conf.global.gas_price) },\n  );\n  return Account.withDerivedAddress(wallet, signingClient);\n};\n\nexport const getAccounts = async (conf: Config, network: string) => {\n  const accountName = Object.keys(conf.global.accounts);\n  const account = await Promise.all(\n    Object.values(conf.global.accounts).map((a) =>\n      fromMnemonic(conf, network, a.mnemonic),\n    ),\n  );\n\n  return Object.fromEntries(accountName.map((name, i) => [name, account[i]]));\n};\n","/* eslint-disable */\n\nconst id = <T>(x: T) => x;\n\nexport const mapObject = (\n  o: Record<string, unknown>,\n  f: Function,\n  g: Function,\n): Record<string, unknown> =>\n  Object.fromEntries(Object.entries(o).map(([k, v]) => [f(k), g(v)]));\n\nexport const mapKV = (\n  o: Record<string, unknown>,\n  f: Function,\n): Record<string, unknown> =>\n  Object.fromEntries(Object.entries(o).map(([k, v]) => f(k, v)));\n\nexport const mapValues = (o: Record<string, unknown>, g: Function) =>\n  mapObject(o, id, g);\n\nexport const extendWith =\n  (properties: Record<string, unknown>) =>\n  (context: Record<string, unknown>) => {\n    Object.entries(properties).forEach(([k, v]) => {\n      // @ts-ignore\n      context[k] = v;\n      // Object.defineProperty(context, k, {\n      //   configurable: true,\n      //   enumerable: true,\n      //   value: v,\n      // });\n    });\n  };\n","import { pascal } from 'case';\nimport type {\n  CodeDetails,\n  Contract as ContractInfo,\n  CosmWasmClient,\n  StdFee,\n} from 'cosmwasm';\nimport type { Account } from './account';\nimport { mapKV, mapObject } from './utils';\n\ntype Msg = Record<string, unknown>;\n\n/**\n * Contract instance with baked-in client\n */\nexport class Contract {\n  address: string;\n  client: CosmWasmClient;\n\n  constructor(address: string, client: CosmWasmClient) {\n    this.address = address;\n    this.client = client;\n  }\n\n  /**\n   * Get contract info\n   */\n  async getInfo(): Promise<ContractInfo> {\n    return await this.client.getContract(this.address);\n  }\n\n  /**\n   * Get code details\n   */\n  async getCode(): Promise<CodeDetails> {\n    return this.client.getCodeDetails((await this.getInfo()).codeId);\n  }\n\n  /**\n   * Query the contract by passing query message\n   * @returns query result\n   */\n  async query(qmsg: Msg): Promise<unknown> {\n    return this.client.queryContractSmart(this.address, qmsg);\n  }\n\n  /**\n   * Execute the contract.\n   * example usage: `contract.execute(xmsg).by(signerAccount)`\n   */\n  execute(\n    xmsg: Msg,\n    senderAddress: string | null,\n    fee: number | 'auto' | StdFee = 'auto',\n  ) {\n    return {\n      by: (account: Account) =>\n        executor(account, this.address)(xmsg, senderAddress, fee),\n    };\n  }\n}\n\nexport const getContracts = (\n  client: CosmWasmClient,\n  state: Record<string, unknown>,\n  /* eslint-disable */\n  // @ts-ignore\n  sdk: { contracts: Record<string, Record<string, Function>> },\n) => {\n  return mapKV(\n    state,\n    (\n      contractName: string,\n      contractInfo: { addresses: Record<string, Record<string, string>> },\n    ) => {\n      const addresses = contractInfo.addresses;\n      const prefixLabel = (label: string) => `$${label}`;\n\n      const pascalContractName = pascal(contractName);\n      const contractSdk = errorIfNotFound(\n        sdk.contracts[pascalContractName],\n        `\"${pascalContractName}\" not found in sdk`,\n      );\n\n      const contractQueryClient = errorIfNotFound(\n        contractSdk[`${pascalContractName}QueryClient`],\n        `\"${pascalContractName}QueryClient\" not found in contract's sdk`,\n      );\n\n      const contractClient = errorIfNotFound(\n        contractSdk[`${pascalContractName}Client`],\n        `\"${pascalContractName}Client\" not found in contract's sdk`,\n      );\n\n      let contracts = mapObject(\n        addresses,\n        prefixLabel,\n        // (addr: string) => ,\n        (addr: string) => ({\n          ...new Contract(addr, client),\n          /* eslint-disable */\n          // @ts-ignore\n          ...new contractQueryClient(client, addr),\n          signer: (account: Account) => {\n            return {\n              /* eslint-disable */\n              // @ts-ignore\n              ...new contractClient(\n                account.signingClient,\n                account.address,\n                addr,\n              ),\n              execute: executor(account, addr),\n            };\n          },\n        }),\n      );\n\n      if (typeof contracts['$default'] === 'object' && contracts['$default']) {\n        contracts = {\n          ...contracts,\n          ...contracts['$default'],\n        };\n\n        Object.setPrototypeOf(contracts, Contract.prototype);\n      }\n      return [contractName, contracts];\n    },\n  );\n};\n\nconst executor =\n  (account: Account, contractAddress: string) =>\n  async (\n    msg: Msg,\n    senderAddress: string | null,\n    fee: number | 'auto' | StdFee = 'auto',\n  ) => {\n    const _senderAddress =\n      senderAddress || (await account.wallet.getAccounts())[0]?.address;\n\n    if (!_senderAddress) {\n      throw Error('Unable to get sender address');\n    }\n\n    return await account.signingClient.execute(\n      _senderAddress,\n      contractAddress,\n      msg,\n      fee,\n    );\n  };\n\nconst errorIfNotFound = <T>(object: T | undefined, msg: string) => {\n  if (object === undefined) {\n    throw Error(msg);\n  } else {\n    return object;\n  }\n};\n"],"names":["stringToPath","Secp256k1HdWallet","SigningCosmWasmClient","GasPrice","pascal"],"mappings":"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"}